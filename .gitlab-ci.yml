image: scratch

stages:
    - build-image
    - build-native
    - build
    - test
    - analyze
    - deploy

variables:
    ALL_RUN_TARGETS: unittest integration
    ALL_MODULES: log config core commander plugins
    ALL_SOURCE_TYPES: src test
    DOCKER_DRIVER: overlay2         # Overwrite default docker driver
    SAST_DISABLE_DIND: "true"
    SAST_DEFAULT_ANALYZERS: "flawfinder,gitleaks,trufflehog,pmd"


.install_exec_helper: &install_exec_helper
        tar -cf exec-helper.tar.xz usr && sudo tar -xvf exec-helper.tar.xz --directory=/ && rm -rf exec-helper.tar.xz

.run_test: &run_test
    stage: test
    image: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-run
    variables:
        RUN_TARGET: $ALL_RUN_TARGETS
        MODULES: $ALL_MODULES
        NB_RUNS: 1000
    needs:
        - job: build-image:run
          artifacts: false
        - job: build:native
          artifacts: true
        - job: build:gcc
          artifacts: true
        - job: build:clang
          artifacts: true
    script:
        - sudo pacman -Sy --noconfirm --needed tar
        - *install_exec_helper
        - echo "using run target '$RUN_TARGET'"
        - echo "using modules '$MODULES'"
        - export RC_PARAMS="max_success=${NB_RUNS} max_size=${NB_RUNS}"
        - exec-helper run-test --run-target $RUN_TARGET --module $MODULES --compiler gcc clang --mode release
    artifacts:
        name: ${CI_JOB_NAME}
        paths:
          - build/gcc/release/*_report.xml
          - build/gcc/release/*_report.html
          - build/clang/release/*.xml
          - build/clang/release/*.html
        reports:
            junit: build/gcc/release/*_report.xml
        when: always

.memory-check: &memory_check
    stage: analyze
    image: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-analyze
    variables:
        MODULES: $ALL_MODULES
        RUN_TARGET: $ALL_RUN_TARGETS
    needs:
        - job: build-image:analyze
          artifacts: false
        - job: build:native
          artifacts: true
        - job: build:gcc:limited-optimization
          artifacts: true
    script:
        - *install_exec_helper
        - export PATH=$(pwd)/build/gcc/limited/install/bin:$(pwd)/build/gcc/limited/install/test/integration:$PATH
        - exec-helper analyze --analyze valgrind --run-target $RUN_TARGET --compiler gcc --mode limited --module $MODULES

.clang_tidy: &clang_tidy
    stage: analyze
    image: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-analyze
    variables:
        MODULES: $ALL_MODULES
        SOURCE_TYPE: $ALL_SOURCE_TYPES
    needs:
        - job: build-image:analyze
          artifacts: false
        - job: build:native
          artifacts: true
    script:
        - *install_exec_helper
        - exec-helper setup init-build -c gcc -m release
        - exec-helper analyze --analyze clang-tidy --module $MODULES --source-type $SOURCE_TYPE

.cppcheck: &cppcheck
    stage: analyze
    image: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-analyze
    variables:
        SOURCE_TYPE: $ALL_SOURCE_TYPES
        MODULES: $ALL_MODULES
    needs:
        - job: build-image:analyze
          artifacts: false
        - job: build:native
          artifacts: true
    script:
        - *install_exec_helper
        - exec-helper analyze --analyze cppcheck --source-type $SOURCE_TYPE --module $MODULES

.undefined_behaviour: &undefined_behaviour
    stage: analyze
    image: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-analyze
    variables:
        RUN_TARGET: $ALL_RUN_TARGETS
        MODULES: $ALL_MODULES
    needs:
        - job: build-image:analyze
          artifacts: false
        - job: build:native
          artifacts: true
    script:
        - *install_exec_helper
        - export PATH=$(pwd)/build/clang/undefined-behaviour/install/bin:$(pwd)/build/clang/undefined-behaviour/install/test/integration:$PATH
        - exec-helper undefined-behaviour

.code_format: &code_format
    stage: analyze
    image: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-analyze
    needs:
        - job: build-image:analyze
          artifacts: false
        - job: build:native
          artifacts: true
    variables:
        MODULES: $ALL_MODULES
        SOURCE_TYPE: $ALL_SOURCE_TYPES
    script:
        - *install_exec_helper
        - exec-helper analyze -a format

.asan: &asan_check
    stage: analyze
    image: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-analyze
    variables:
        MODULES: $ALL_MODULES
    needs:
        - job: build-image:analyze
          artifacts: false
        - job: build:native
          artifacts: true
        - job: build:asan
          artifacts: true
    script:
        - *install_exec_helper
        - export PATH=$(pwd)/build/clang/asan/install/bin:$(pwd)/build/clang/asan/install/test/integration:$PATH
        - export ASAN_OPTIONS="check_initialization_order=1 print_stacktrace=1"
        - /usr/bin/exec-helper run-test --compiler clang --mode asan --run-target unittest

.build_image: &build_image
    stage: build-image
    image: docker:latest
    services:
        - docker:dind
    variables:
        IMAGE: blaat
        WORKDIR: docker
    script:
        - docker login -u gitlab-ci-token -p "${CI_BUILD_TOKEN}" "${CI_REGISTRY}"
        - echo "Building image '${IMAGE}'"
        - cd ${WORKDIR}
        - docker build --compress=true --force-rm=true --pull=true --no-cache=true --rm=true --tag="${IMAGE}" .
        - docker push ${IMAGE}

build-image:build:
    <<: *build_image
    variables:
        IMAGE: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-build
        WORKDIR: docker/build

build-image:analyze:
    <<: *build_image
    variables:
        IMAGE: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-analyze
        WORKDIR: docker/analyze

build-image:run:
    <<: *build_image
    variables:
        IMAGE: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-run
        WORKDIR: docker/run

build-image:build-debian:
    stage: build-image
    image: docker:latest
    services:
        - docker:dind
    variables:
        BUILD_IMAGE: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-build-debian
    before_script:
        - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    script:
        - echo "Building image '$BUILD_IMAGE'"
        - cd docker/build
        - docker build -t ${BUILD_IMAGE} -f debian.Dockerfile .
        - docker push ${BUILD_IMAGE}

build:native:
    stage: build-native
    image: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-build
    needs:
        - job: build-image:build
          artifacts: false
    variables:
        INSTALL_DIR: usr
    script:
        - make PREFIX=${PWD}/${INSTALL_DIR} ACTUAL_PLUGINS_INSTALL_PREFIX=/usr/share/exec-helper/plugins UNITY_BUILD=on
        - make PREFIX=${PWD}/${INSTALL_DIR} ACTUAL_PLUGINS_INSTALL_PREFIX=/usr/share/exec-helper/plugins install
    artifacts:
        expire_in: 1 day
        paths:
            - ${INSTALL_DIR}

build:local:
    stage: build-native
    image: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-build
    needs:
        - job: build-image:build
          artifacts: false
    script:
        - make UNITY_BUILD=on
        - sudo make install

build:debian:
    stage: build-native
    image: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-build-debian
    needs:
        - job: build-image:build-debian
          artifacts: false
    variables:
        INSTALL_DIR: usr
    script:
        - make BUILD_DOCUMENTATION=OFF PREFIX=${PWD}/${INSTALL_DIR} ACTUAL_PLUGINS_INSTALL_PREFIX=/usr/share/exec-helper/plugins UNITY_BUILD=on
        - make PREFIX=${PWD}/${INSTALL_DIR} ACTUAL_PLUGINS_INSTALL_PREFIX=/usr/share/exec-helper/plugins install
    artifacts:
        expire_in: 1 day
        paths:
            - ${INSTALL_DIR}

build:gcc:
    stage: build
    image: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-build
    needs:
        - job: build-image:build
          artifacts: false
        - job: build:native
          artifacts: true
    script:
        - *install_exec_helper
        - exec-helper init build --compiler gcc --mode release
    artifacts:
        expire_in: 1 day
        paths:
            - build/gcc/release/install

build:clang:
    stage: build
    image: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-build
    needs:
        - job: build-image:build
          artifacts: false
        - job: build:native
          artifacts: true
    script: 
        - *install_exec_helper
        - exec-helper init build --compiler clang --mode release
    artifacts:
        expire_in: 1 day
        paths:
            - build/clang/release/install

build:gcc:debug:
    stage: build
    image: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-build
    needs:
        - job: build-image:build
          artifacts: false
        - job: build:native
          artifacts: true
    script:
        - *install_exec_helper
        - exec-helper init build --compiler gcc --mode debug

build:gcc:limited-optimization:
    stage: build
    image: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-build
    needs:
        - job: build-image:build
          artifacts: false
        - job: build:native
    script:
        - *install_exec_helper
        - exec-helper init-limited-optimization build --compiler gcc --mode limited
    artifacts:
        expire_in: 1 day
        paths:
            - build/gcc/limited/install

build:no-system:
    stage: build
    image: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-run
    needs:
        - job: build-image:run
          artifacts: false
        - job: build:native
          artifacts: true
    before_script:
        - sudo pacman -Sy --needed --noconfirm clang meson ninja doxygen git tar pkg-config
    script: 
        - *install_exec_helper
        - exec-helper init-no-system build --compiler clang --mode release

cross-compilation:
    stage: build
    image: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-build-debian
    needs:
        - job: build-image:build-debian
          artifacts: false
        - job: build:debian
          artifacts: true
    before_script:
        - *install_exec_helper
    script:
        - apt-get update
        - apt-get install --yes --no-install-recommends debootstrap gcc-aarch64-linux-gnu g++-aarch64-linux-gnu cmake pkg-config git
        - debootstrap --arch=arm64 --download-only --variant=minbase --include=libboost-program-options-dev,libboost-filesystem-dev,libboost-log-dev,libboost-thread-dev,libc6-dev,liblua5.3-dev,libyaml-cpp-dev,libmsgsl-dev testing ./sysroot_arm64 http://deb.debian.org/debian/
        - for DEB in $(find sysroot_arm64/var/cache/apt/archives -not -path sysroot_arm64/var/cache/apt/archives/partial -type f); do echo "Extracting ${DEB}..."; dpkg -x ${DEB} sysroot_arm64; done   # Unpack all downloaded debian packages, since debootstrap does not seem to unpack the additional included ones and their dependencies
        - cp -r /usr/aarch64-linux-gnu/* sysroot_arm64/usr/
        - exec-helper init-build build --compiler gcc --triplet aarch64-linux-gnu- --arch aarch64 --mode release --sysroot $(pwd)/sysroot_arm64

build:asan:
    stage: build
    image: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-build
    needs:
        - job: build-image:build
          artifacts: false
        - job: build:native
    script:
        - *install_exec_helper
        - export ASAN_OPTIONS="check_initialization_order=1 print_stacktrace=1"
        - exec-helper init-asan build --compiler clang --mode asan
    artifacts:
        expire_in: 1 day
        paths:
            - build/clang/asan/install

unittests:
    <<: *run_test
    variables:
        RUN_TARGET: unittest
        MODULES: log config
        NB_RUNS: 1000

unittests-core:
    <<: *run_test
    variables:
        RUN_TARGET: unittest
        MODULES: core plugins commander
        NB_RUNS: 100
    before_script:
        - ulimit -n

integration:
    <<: *run_test
    variables:
        RUN_TARGET: integration
    before_script:
        - sudo pacman -Sy --needed --noconfirm python python-pip
        - sudo pip install -r test/integration/requirements.txt

memory-check:
    <<: *memory_check
    variables:
        RUN_TARGET: unittest
        MODULES: $ALL_MODULES

clang-tidy:config:
    <<: *clang_tidy
    variables:
        MODULES: log config
        SOURCE_TYPE: $ALL_SOURCE_TYPES

clang-tidy:plugins:
    <<: *clang_tidy
    variables:
        MODULES: core commander plugins
        SOURCE_TYPE: $ALL_SOURCE_TYPES

clang-tidy-integration:
    <<: *clang_tidy
    variables:
        SOURCE_TYPE: test
        MODULES: integration

clang-static-analyzer:
    stage: analyze
    image: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-analyze
    needs:
        - job: build-image:analyze
          artifacts: false
        - job: build:native
          artifacts: true
    script:
        - *install_exec_helper
        - exec-helper analyze --analyze clang-static-analyzer --mode debug --compiler clang

undefined-behaviour:
    <<: *undefined_behaviour

address-sanitizer:
    <<: *asan_check

coverage:
    stage: analyze
    image: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-analyze
    needs:
        - job: build-image:analyze
          artifacts: false
        - job: build:native
          artifacts: true
        - job: build:gcc
          artifacts: true
    before_script:
        - sudo pacman -Sy --noconfirm --needed which
    script:
        - *install_exec_helper
        - export PATH=$(pwd)/build/gcc/release/install/bin:$(pwd)/build/gcc/release/install/test/integration:$PATH
        - exec-helper coverage
    after_script:
        - bash <(curl -Ls https://coverage.codacy.com/get.sh) report --project-token "${CODACY_PROJECT_TOKEN}" --coverage-reports lcov-plugin.info
    artifacts:
        paths:
            - test_coverage/

# Cppcheck is disables until it can handle C++ 17's trailing return types
#cppcheck-unittest:
    #<<: *cppcheck
    #variables:
        #SOURCE_TYPE: src
        #MODULES: $ALL_MODULES

code-duplication-pmd-cpd:
    stage: analyze
    image: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-analyze
    needs:
        - job: build-image:analyze
          artifacts: false
        - job: build:native
          artifacts: true
    script:
        - *install_exec_helper
        - exec-helper analyze --analyze pmd
        - exec-helper analyze --analyze pmd --module integration --source-type test

#coverity:
    #stage: analyze
    #image: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-analyze
    #variables:
        #COVERITY_ARCHIVE_NAME: exec-helper_${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHA}.xz
    #dependencies:
        #- build:native
    #script:
        #- *install_exec_helper
        #- curl --data "token=${COVERITY_SCAN_TOKEN}&project=bverhagen%2Fexec-helper" https://scan.coverity.com/download/cxx/linux64 -o coverity_tool.tgz
        #- tar -C /tmp -xf coverity_tool.tgz
        #- pushd /tmp/cov-analysis-linux64-*/bin
        #- export PATH=$PATH:$(pwd)
        #- popd
        #- exec-helper distclean analyze --analyze coverity --compiler gcc --mode release --coverity-archive-name $COVERITY_ARCHIVE_NAME
        #- curl --form token=${COVERITY_SCAN_TOKEN} --form email=barrie.verhagen@gmail.com --form file=@${COVERITY_ARCHIVE_NAME} --form version="${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHA}" --form description="Analysis scan for ${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHA}" https://scan.coverity.com/builds?project=bverhagen%2Fexec-helper
    #only:
        #- master
        #- dev

examples:
    stage: analyze
    image: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-analyze
    needs:
        - job: build-image:analyze
          artifacts: false
        - job: build:native
          artifacts: true
    script:
        - *install_exec_helper
        - export ROOT_DIR=$(pwd)
        - cd ${ROOT_DIR}/src/config/examples
        - exec-helper --settings-file exec-helper-config.example build clean rebuild
        - exec-helper --settings-file exec-helper-config-environment.example example
        - cd ${ROOT_DIR}/src/plugins/examples
        - exec-helper --settings-file command-line-command.example example
        - exec-helper --settings-file selector.example example
        - exec-helper --settings-file bootstrap.example example
        - exec-helper --settings-file cmake.example example
        - exec-helper --settings-file make.example example
        - exec-helper --settings-file ninja.example example
        - exec-helper --settings-file scons.example example
        - exec-helper --settings-file clang-static-analyzer.example example
        - exec-helper --settings-file clang-tidy.example example
        - exec-helper --settings-file cppcheck.example example
        - exec-helper --settings-file lcov.example example
        - exec-helper --settings-file pmd.example example
        - exec-helper --settings-file valgrind.example example
        - exec-helper --settings-file meson.example example

code-format:
    <<: *code_format

include:
    - template: SAST.gitlab-ci.yml
    - template: License-Scanning.gitlab-ci.yml

pages:
    stage: deploy
    image: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-run
    dependencies:
        - coverage
        - build:gcc
        - integration
    script:
        - mkdir public
        - mv pages/index.html public/
        - mv test_coverage/ public/coverage
        - mkdir -p public/docs
        - mv build/gcc/release/install/share/doc/exec-helper/api/html public/docs/
        - mkdir public/integration && mv build/gcc/release/system_test_report.html public/integration/index.html
    artifacts:
        paths:
            - public
    only:
        - master
